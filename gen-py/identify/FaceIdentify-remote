#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from identify import FaceIdentify
from identify.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void FI_add_face_database(string uid, string user_info, string group_id, string imagename)')
    print('  i32 FI_del_face_database(string uid, string group_id)')
    print('  i32 FI_update_face_database(string uid, string user_info, string group_id, string imagename)')
    print('  i32 FI_find_user_info(string uid)')
    print('  db_users FI_find_group_users(string group_id)')
    print('  face_id_st FI_face_database_identify(string group_id, string imagename)')
    print('  string FI_face_database_verify(string uid, string user_info, string group_id, string imagename)')
    print('  i32 FI_group_deleteuser(string uid, string group_id)')
    print('  i32 FI_group_adduser(string src_group_id, string group_id, string uid)')
    print('  face_detect_st FI_face_detect(string imagename)')
    print('  string FI_face_match(string image1, string image2)')
    print('  rectangle FI_object_tracking(string image, rectangle rect, i32 start)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = FaceIdentify.Client(protocol)
transport.open()

if cmd == 'FI_add_face_database':
    if len(args) != 4:
        print('FI_add_face_database requires 4 args')
        sys.exit(1)
    pp.pprint(client.FI_add_face_database(args[0], args[1], args[2], args[3],))

elif cmd == 'FI_del_face_database':
    if len(args) != 2:
        print('FI_del_face_database requires 2 args')
        sys.exit(1)
    pp.pprint(client.FI_del_face_database(args[0], args[1],))

elif cmd == 'FI_update_face_database':
    if len(args) != 4:
        print('FI_update_face_database requires 4 args')
        sys.exit(1)
    pp.pprint(client.FI_update_face_database(args[0], args[1], args[2], args[3],))

elif cmd == 'FI_find_user_info':
    if len(args) != 1:
        print('FI_find_user_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.FI_find_user_info(args[0],))

elif cmd == 'FI_find_group_users':
    if len(args) != 1:
        print('FI_find_group_users requires 1 args')
        sys.exit(1)
    pp.pprint(client.FI_find_group_users(args[0],))

elif cmd == 'FI_face_database_identify':
    if len(args) != 2:
        print('FI_face_database_identify requires 2 args')
        sys.exit(1)
    pp.pprint(client.FI_face_database_identify(args[0], args[1],))

elif cmd == 'FI_face_database_verify':
    if len(args) != 4:
        print('FI_face_database_verify requires 4 args')
        sys.exit(1)
    pp.pprint(client.FI_face_database_verify(args[0], args[1], args[2], args[3],))

elif cmd == 'FI_group_deleteuser':
    if len(args) != 2:
        print('FI_group_deleteuser requires 2 args')
        sys.exit(1)
    pp.pprint(client.FI_group_deleteuser(args[0], args[1],))

elif cmd == 'FI_group_adduser':
    if len(args) != 3:
        print('FI_group_adduser requires 3 args')
        sys.exit(1)
    pp.pprint(client.FI_group_adduser(args[0], args[1], args[2],))

elif cmd == 'FI_face_detect':
    if len(args) != 1:
        print('FI_face_detect requires 1 args')
        sys.exit(1)
    pp.pprint(client.FI_face_detect(args[0],))

elif cmd == 'FI_face_match':
    if len(args) != 2:
        print('FI_face_match requires 2 args')
        sys.exit(1)
    pp.pprint(client.FI_face_match(args[0], args[1],))

elif cmd == 'FI_object_tracking':
    if len(args) != 3:
        print('FI_object_tracking requires 3 args')
        sys.exit(1)
    pp.pprint(client.FI_object_tracking(args[0], eval(args[1]), eval(args[2]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
