#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport


class Iface(object):
    def FI_add_face_database(self, uid, user_info, group_id, imagename):
        """
        Parameters:
         - uid
         - user_info
         - group_id
         - imagename
        """
        pass

    def FI_del_face_database(self, uid, group_id):
        """
        Parameters:
         - uid
         - group_id
        """
        pass

    def FI_update_face_database(self, uid, user_info, group_id, imagename):
        """
        Parameters:
         - uid
         - user_info
         - group_id
         - imagename
        """
        pass

    def FI_find_user_info(self, uid):
        """
        Parameters:
         - uid
        """
        pass

    def FI_find_group_users(self, group_id):
        """
        Parameters:
         - group_id
        """
        pass

    def FI_face_database_identify(self, group_id, imagename):
        """
        Parameters:
         - group_id
         - imagename
        """
        pass

    def FI_face_database_verify(self, uid, user_info, group_id, imagename):
        """
        Parameters:
         - uid
         - user_info
         - group_id
         - imagename
        """
        pass

    def FI_group_deleteuser(self, uid, group_id):
        """
        Parameters:
         - uid
         - group_id
        """
        pass

    def FI_group_adduser(self, src_group_id, group_id, uid):
        """
        Parameters:
         - src_group_id
         - group_id
         - uid
        """
        pass

    def FI_face_detect(self, imagename):
        """
        Parameters:
         - imagename
        """
        pass

    def FI_face_match(self, image1, image2):
        """
        Parameters:
         - image1
         - image2
        """
        pass

    def FI_object_tracking(self, image, rect, start):
        """
        Parameters:
         - image
         - rect
         - start
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def FI_add_face_database(self, uid, user_info, group_id, imagename):
        """
        Parameters:
         - uid
         - user_info
         - group_id
         - imagename
        """
        self.send_FI_add_face_database(uid, user_info, group_id, imagename)
        self.recv_FI_add_face_database()

    def send_FI_add_face_database(self, uid, user_info, group_id, imagename):
        self._oprot.writeMessageBegin('FI_add_face_database', TMessageType.CALL, self._seqid)
        args = FI_add_face_database_args()
        args.uid = uid
        args.user_info = user_info
        args.group_id = group_id
        args.imagename = imagename
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_FI_add_face_database(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = FI_add_face_database_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def FI_del_face_database(self, uid, group_id):
        """
        Parameters:
         - uid
         - group_id
        """
        self.send_FI_del_face_database(uid, group_id)
        return self.recv_FI_del_face_database()

    def send_FI_del_face_database(self, uid, group_id):
        self._oprot.writeMessageBegin('FI_del_face_database', TMessageType.CALL, self._seqid)
        args = FI_del_face_database_args()
        args.uid = uid
        args.group_id = group_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_FI_del_face_database(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = FI_del_face_database_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "FI_del_face_database failed: unknown result")

    def FI_update_face_database(self, uid, user_info, group_id, imagename):
        """
        Parameters:
         - uid
         - user_info
         - group_id
         - imagename
        """
        self.send_FI_update_face_database(uid, user_info, group_id, imagename)
        return self.recv_FI_update_face_database()

    def send_FI_update_face_database(self, uid, user_info, group_id, imagename):
        self._oprot.writeMessageBegin('FI_update_face_database', TMessageType.CALL, self._seqid)
        args = FI_update_face_database_args()
        args.uid = uid
        args.user_info = user_info
        args.group_id = group_id
        args.imagename = imagename
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_FI_update_face_database(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = FI_update_face_database_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "FI_update_face_database failed: unknown result")

    def FI_find_user_info(self, uid):
        """
        Parameters:
         - uid
        """
        self.send_FI_find_user_info(uid)
        return self.recv_FI_find_user_info()

    def send_FI_find_user_info(self, uid):
        self._oprot.writeMessageBegin('FI_find_user_info', TMessageType.CALL, self._seqid)
        args = FI_find_user_info_args()
        args.uid = uid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_FI_find_user_info(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = FI_find_user_info_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "FI_find_user_info failed: unknown result")

    def FI_find_group_users(self, group_id):
        """
        Parameters:
         - group_id
        """
        self.send_FI_find_group_users(group_id)
        return self.recv_FI_find_group_users()

    def send_FI_find_group_users(self, group_id):
        self._oprot.writeMessageBegin('FI_find_group_users', TMessageType.CALL, self._seqid)
        args = FI_find_group_users_args()
        args.group_id = group_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_FI_find_group_users(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = FI_find_group_users_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "FI_find_group_users failed: unknown result")

    def FI_face_database_identify(self, group_id, imagename):
        """
        Parameters:
         - group_id
         - imagename
        """
        self.send_FI_face_database_identify(group_id, imagename)
        return self.recv_FI_face_database_identify()

    def send_FI_face_database_identify(self, group_id, imagename):
        self._oprot.writeMessageBegin('FI_face_database_identify', TMessageType.CALL, self._seqid)
        args = FI_face_database_identify_args()
        args.group_id = group_id
        args.imagename = imagename
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_FI_face_database_identify(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = FI_face_database_identify_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "FI_face_database_identify failed: unknown result")

    def FI_face_database_verify(self, uid, user_info, group_id, imagename):
        """
        Parameters:
         - uid
         - user_info
         - group_id
         - imagename
        """
        self.send_FI_face_database_verify(uid, user_info, group_id, imagename)
        return self.recv_FI_face_database_verify()

    def send_FI_face_database_verify(self, uid, user_info, group_id, imagename):
        self._oprot.writeMessageBegin('FI_face_database_verify', TMessageType.CALL, self._seqid)
        args = FI_face_database_verify_args()
        args.uid = uid
        args.user_info = user_info
        args.group_id = group_id
        args.imagename = imagename
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_FI_face_database_verify(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = FI_face_database_verify_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "FI_face_database_verify failed: unknown result")

    def FI_group_deleteuser(self, uid, group_id):
        """
        Parameters:
         - uid
         - group_id
        """
        self.send_FI_group_deleteuser(uid, group_id)
        return self.recv_FI_group_deleteuser()

    def send_FI_group_deleteuser(self, uid, group_id):
        self._oprot.writeMessageBegin('FI_group_deleteuser', TMessageType.CALL, self._seqid)
        args = FI_group_deleteuser_args()
        args.uid = uid
        args.group_id = group_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_FI_group_deleteuser(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = FI_group_deleteuser_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "FI_group_deleteuser failed: unknown result")

    def FI_group_adduser(self, src_group_id, group_id, uid):
        """
        Parameters:
         - src_group_id
         - group_id
         - uid
        """
        self.send_FI_group_adduser(src_group_id, group_id, uid)
        return self.recv_FI_group_adduser()

    def send_FI_group_adduser(self, src_group_id, group_id, uid):
        self._oprot.writeMessageBegin('FI_group_adduser', TMessageType.CALL, self._seqid)
        args = FI_group_adduser_args()
        args.src_group_id = src_group_id
        args.group_id = group_id
        args.uid = uid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_FI_group_adduser(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = FI_group_adduser_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "FI_group_adduser failed: unknown result")

    def FI_face_detect(self, imagename):
        """
        Parameters:
         - imagename
        """
        self.send_FI_face_detect(imagename)
        return self.recv_FI_face_detect()

    def send_FI_face_detect(self, imagename):
        self._oprot.writeMessageBegin('FI_face_detect', TMessageType.CALL, self._seqid)
        args = FI_face_detect_args()
        args.imagename = imagename
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_FI_face_detect(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = FI_face_detect_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "FI_face_detect failed: unknown result")

    def FI_face_match(self, image1, image2):
        """
        Parameters:
         - image1
         - image2
        """
        self.send_FI_face_match(image1, image2)
        return self.recv_FI_face_match()

    def send_FI_face_match(self, image1, image2):
        self._oprot.writeMessageBegin('FI_face_match', TMessageType.CALL, self._seqid)
        args = FI_face_match_args()
        args.image1 = image1
        args.image2 = image2
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_FI_face_match(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = FI_face_match_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "FI_face_match failed: unknown result")

    def FI_object_tracking(self, image, rect, start):
        """
        Parameters:
         - image
         - rect
         - start
        """
        self.send_FI_object_tracking(image, rect, start)
        return self.recv_FI_object_tracking()

    def send_FI_object_tracking(self, image, rect, start):
        self._oprot.writeMessageBegin('FI_object_tracking', TMessageType.CALL, self._seqid)
        args = FI_object_tracking_args()
        args.image = image
        args.rect = rect
        args.start = start
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_FI_object_tracking(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = FI_object_tracking_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "FI_object_tracking failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["FI_add_face_database"] = Processor.process_FI_add_face_database
        self._processMap["FI_del_face_database"] = Processor.process_FI_del_face_database
        self._processMap["FI_update_face_database"] = Processor.process_FI_update_face_database
        self._processMap["FI_find_user_info"] = Processor.process_FI_find_user_info
        self._processMap["FI_find_group_users"] = Processor.process_FI_find_group_users
        self._processMap["FI_face_database_identify"] = Processor.process_FI_face_database_identify
        self._processMap["FI_face_database_verify"] = Processor.process_FI_face_database_verify
        self._processMap["FI_group_deleteuser"] = Processor.process_FI_group_deleteuser
        self._processMap["FI_group_adduser"] = Processor.process_FI_group_adduser
        self._processMap["FI_face_detect"] = Processor.process_FI_face_detect
        self._processMap["FI_face_match"] = Processor.process_FI_face_match
        self._processMap["FI_object_tracking"] = Processor.process_FI_object_tracking

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_FI_add_face_database(self, seqid, iprot, oprot):
        args = FI_add_face_database_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = FI_add_face_database_result()
        try:
            self._handler.FI_add_face_database(args.uid, args.user_info, args.group_id, args.imagename)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("FI_add_face_database", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_FI_del_face_database(self, seqid, iprot, oprot):
        args = FI_del_face_database_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = FI_del_face_database_result()
        try:
            result.success = self._handler.FI_del_face_database(args.uid, args.group_id)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("FI_del_face_database", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_FI_update_face_database(self, seqid, iprot, oprot):
        args = FI_update_face_database_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = FI_update_face_database_result()
        try:
            result.success = self._handler.FI_update_face_database(args.uid, args.user_info, args.group_id, args.imagename)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("FI_update_face_database", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_FI_find_user_info(self, seqid, iprot, oprot):
        args = FI_find_user_info_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = FI_find_user_info_result()
        try:
            result.success = self._handler.FI_find_user_info(args.uid)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("FI_find_user_info", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_FI_find_group_users(self, seqid, iprot, oprot):
        args = FI_find_group_users_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = FI_find_group_users_result()
        try:
            result.success = self._handler.FI_find_group_users(args.group_id)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("FI_find_group_users", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_FI_face_database_identify(self, seqid, iprot, oprot):
        args = FI_face_database_identify_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = FI_face_database_identify_result()
        try:
            result.success = self._handler.FI_face_database_identify(args.group_id, args.imagename)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("FI_face_database_identify", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_FI_face_database_verify(self, seqid, iprot, oprot):
        args = FI_face_database_verify_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = FI_face_database_verify_result()
        try:
            result.success = self._handler.FI_face_database_verify(args.uid, args.user_info, args.group_id, args.imagename)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("FI_face_database_verify", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_FI_group_deleteuser(self, seqid, iprot, oprot):
        args = FI_group_deleteuser_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = FI_group_deleteuser_result()
        try:
            result.success = self._handler.FI_group_deleteuser(args.uid, args.group_id)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("FI_group_deleteuser", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_FI_group_adduser(self, seqid, iprot, oprot):
        args = FI_group_adduser_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = FI_group_adduser_result()
        try:
            result.success = self._handler.FI_group_adduser(args.src_group_id, args.group_id, args.uid)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("FI_group_adduser", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_FI_face_detect(self, seqid, iprot, oprot):
        args = FI_face_detect_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = FI_face_detect_result()
        try:
            result.success = self._handler.FI_face_detect(args.imagename)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("FI_face_detect", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_FI_face_match(self, seqid, iprot, oprot):
        args = FI_face_match_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = FI_face_match_result()
        try:
            result.success = self._handler.FI_face_match(args.image1, args.image2)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("FI_face_match", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_FI_object_tracking(self, seqid, iprot, oprot):
        args = FI_object_tracking_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = FI_object_tracking_result()
        try:
            result.success = self._handler.FI_object_tracking(args.image, args.rect, args.start)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("FI_object_tracking", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class FI_add_face_database_args(object):
    """
    Attributes:
     - uid
     - user_info
     - group_id
     - imagename
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'uid', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'user_info', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'group_id', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'imagename', 'UTF8', None, ),  # 4
    )

    def __init__(self, uid=None, user_info=None, group_id=None, imagename=None,):
        self.uid = uid
        self.user_info = user_info
        self.group_id = group_id
        self.imagename = imagename

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.uid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.user_info = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.group_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.imagename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FI_add_face_database_args')
        if self.uid is not None:
            oprot.writeFieldBegin('uid', TType.STRING, 1)
            oprot.writeString(self.uid.encode('utf-8') if sys.version_info[0] == 2 else self.uid)
            oprot.writeFieldEnd()
        if self.user_info is not None:
            oprot.writeFieldBegin('user_info', TType.STRING, 2)
            oprot.writeString(self.user_info.encode('utf-8') if sys.version_info[0] == 2 else self.user_info)
            oprot.writeFieldEnd()
        if self.group_id is not None:
            oprot.writeFieldBegin('group_id', TType.STRING, 3)
            oprot.writeString(self.group_id.encode('utf-8') if sys.version_info[0] == 2 else self.group_id)
            oprot.writeFieldEnd()
        if self.imagename is not None:
            oprot.writeFieldBegin('imagename', TType.STRING, 4)
            oprot.writeString(self.imagename.encode('utf-8') if sys.version_info[0] == 2 else self.imagename)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FI_add_face_database_result(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FI_add_face_database_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FI_del_face_database_args(object):
    """
    Attributes:
     - uid
     - group_id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'uid', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'group_id', 'UTF8', None, ),  # 2
    )

    def __init__(self, uid=None, group_id=None,):
        self.uid = uid
        self.group_id = group_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.uid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.group_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FI_del_face_database_args')
        if self.uid is not None:
            oprot.writeFieldBegin('uid', TType.STRING, 1)
            oprot.writeString(self.uid.encode('utf-8') if sys.version_info[0] == 2 else self.uid)
            oprot.writeFieldEnd()
        if self.group_id is not None:
            oprot.writeFieldBegin('group_id', TType.STRING, 2)
            oprot.writeString(self.group_id.encode('utf-8') if sys.version_info[0] == 2 else self.group_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FI_del_face_database_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.I32, 'success', None, None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FI_del_face_database_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FI_update_face_database_args(object):
    """
    Attributes:
     - uid
     - user_info
     - group_id
     - imagename
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'uid', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'user_info', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'group_id', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'imagename', 'UTF8', None, ),  # 4
    )

    def __init__(self, uid=None, user_info=None, group_id=None, imagename=None,):
        self.uid = uid
        self.user_info = user_info
        self.group_id = group_id
        self.imagename = imagename

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.uid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.user_info = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.group_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.imagename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FI_update_face_database_args')
        if self.uid is not None:
            oprot.writeFieldBegin('uid', TType.STRING, 1)
            oprot.writeString(self.uid.encode('utf-8') if sys.version_info[0] == 2 else self.uid)
            oprot.writeFieldEnd()
        if self.user_info is not None:
            oprot.writeFieldBegin('user_info', TType.STRING, 2)
            oprot.writeString(self.user_info.encode('utf-8') if sys.version_info[0] == 2 else self.user_info)
            oprot.writeFieldEnd()
        if self.group_id is not None:
            oprot.writeFieldBegin('group_id', TType.STRING, 3)
            oprot.writeString(self.group_id.encode('utf-8') if sys.version_info[0] == 2 else self.group_id)
            oprot.writeFieldEnd()
        if self.imagename is not None:
            oprot.writeFieldBegin('imagename', TType.STRING, 4)
            oprot.writeString(self.imagename.encode('utf-8') if sys.version_info[0] == 2 else self.imagename)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FI_update_face_database_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.I32, 'success', None, None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FI_update_face_database_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FI_find_user_info_args(object):
    """
    Attributes:
     - uid
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'uid', 'UTF8', None, ),  # 1
    )

    def __init__(self, uid=None,):
        self.uid = uid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.uid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FI_find_user_info_args')
        if self.uid is not None:
            oprot.writeFieldBegin('uid', TType.STRING, 1)
            oprot.writeString(self.uid.encode('utf-8') if sys.version_info[0] == 2 else self.uid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FI_find_user_info_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.I32, 'success', None, None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FI_find_user_info_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FI_find_group_users_args(object):
    """
    Attributes:
     - group_id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'group_id', 'UTF8', None, ),  # 1
    )

    def __init__(self, group_id=None,):
        self.group_id = group_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.group_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FI_find_group_users_args')
        if self.group_id is not None:
            oprot.writeFieldBegin('group_id', TType.STRING, 1)
            oprot.writeString(self.group_id.encode('utf-8') if sys.version_info[0] == 2 else self.group_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FI_find_group_users_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (db_users, db_users.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = db_users()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FI_find_group_users_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FI_face_database_identify_args(object):
    """
    Attributes:
     - group_id
     - imagename
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'group_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'imagename', 'UTF8', None, ),  # 2
    )

    def __init__(self, group_id=None, imagename=None,):
        self.group_id = group_id
        self.imagename = imagename

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.group_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.imagename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FI_face_database_identify_args')
        if self.group_id is not None:
            oprot.writeFieldBegin('group_id', TType.STRING, 1)
            oprot.writeString(self.group_id.encode('utf-8') if sys.version_info[0] == 2 else self.group_id)
            oprot.writeFieldEnd()
        if self.imagename is not None:
            oprot.writeFieldBegin('imagename', TType.STRING, 2)
            oprot.writeString(self.imagename.encode('utf-8') if sys.version_info[0] == 2 else self.imagename)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FI_face_database_identify_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (face_id_st, face_id_st.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = face_id_st()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FI_face_database_identify_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FI_face_database_verify_args(object):
    """
    Attributes:
     - uid
     - user_info
     - group_id
     - imagename
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'uid', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'user_info', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'group_id', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'imagename', 'UTF8', None, ),  # 4
    )

    def __init__(self, uid=None, user_info=None, group_id=None, imagename=None,):
        self.uid = uid
        self.user_info = user_info
        self.group_id = group_id
        self.imagename = imagename

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.uid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.user_info = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.group_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.imagename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FI_face_database_verify_args')
        if self.uid is not None:
            oprot.writeFieldBegin('uid', TType.STRING, 1)
            oprot.writeString(self.uid.encode('utf-8') if sys.version_info[0] == 2 else self.uid)
            oprot.writeFieldEnd()
        if self.user_info is not None:
            oprot.writeFieldBegin('user_info', TType.STRING, 2)
            oprot.writeString(self.user_info.encode('utf-8') if sys.version_info[0] == 2 else self.user_info)
            oprot.writeFieldEnd()
        if self.group_id is not None:
            oprot.writeFieldBegin('group_id', TType.STRING, 3)
            oprot.writeString(self.group_id.encode('utf-8') if sys.version_info[0] == 2 else self.group_id)
            oprot.writeFieldEnd()
        if self.imagename is not None:
            oprot.writeFieldBegin('imagename', TType.STRING, 4)
            oprot.writeString(self.imagename.encode('utf-8') if sys.version_info[0] == 2 else self.imagename)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FI_face_database_verify_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FI_face_database_verify_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FI_group_deleteuser_args(object):
    """
    Attributes:
     - uid
     - group_id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'uid', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'group_id', 'UTF8', None, ),  # 2
    )

    def __init__(self, uid=None, group_id=None,):
        self.uid = uid
        self.group_id = group_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.uid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.group_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FI_group_deleteuser_args')
        if self.uid is not None:
            oprot.writeFieldBegin('uid', TType.STRING, 1)
            oprot.writeString(self.uid.encode('utf-8') if sys.version_info[0] == 2 else self.uid)
            oprot.writeFieldEnd()
        if self.group_id is not None:
            oprot.writeFieldBegin('group_id', TType.STRING, 2)
            oprot.writeString(self.group_id.encode('utf-8') if sys.version_info[0] == 2 else self.group_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FI_group_deleteuser_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.I32, 'success', None, None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FI_group_deleteuser_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FI_group_adduser_args(object):
    """
    Attributes:
     - src_group_id
     - group_id
     - uid
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'src_group_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'group_id', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'uid', 'UTF8', None, ),  # 3
    )

    def __init__(self, src_group_id=None, group_id=None, uid=None,):
        self.src_group_id = src_group_id
        self.group_id = group_id
        self.uid = uid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.src_group_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.group_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.uid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FI_group_adduser_args')
        if self.src_group_id is not None:
            oprot.writeFieldBegin('src_group_id', TType.STRING, 1)
            oprot.writeString(self.src_group_id.encode('utf-8') if sys.version_info[0] == 2 else self.src_group_id)
            oprot.writeFieldEnd()
        if self.group_id is not None:
            oprot.writeFieldBegin('group_id', TType.STRING, 2)
            oprot.writeString(self.group_id.encode('utf-8') if sys.version_info[0] == 2 else self.group_id)
            oprot.writeFieldEnd()
        if self.uid is not None:
            oprot.writeFieldBegin('uid', TType.STRING, 3)
            oprot.writeString(self.uid.encode('utf-8') if sys.version_info[0] == 2 else self.uid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FI_group_adduser_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.I32, 'success', None, None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FI_group_adduser_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FI_face_detect_args(object):
    """
    Attributes:
     - imagename
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'imagename', 'UTF8', None, ),  # 1
    )

    def __init__(self, imagename=None,):
        self.imagename = imagename

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.imagename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FI_face_detect_args')
        if self.imagename is not None:
            oprot.writeFieldBegin('imagename', TType.STRING, 1)
            oprot.writeString(self.imagename.encode('utf-8') if sys.version_info[0] == 2 else self.imagename)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FI_face_detect_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (face_detect_st, face_detect_st.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = face_detect_st()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FI_face_detect_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FI_face_match_args(object):
    """
    Attributes:
     - image1
     - image2
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'image1', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'image2', 'UTF8', None, ),  # 2
    )

    def __init__(self, image1=None, image2=None,):
        self.image1 = image1
        self.image2 = image2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.image1 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.image2 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FI_face_match_args')
        if self.image1 is not None:
            oprot.writeFieldBegin('image1', TType.STRING, 1)
            oprot.writeString(self.image1.encode('utf-8') if sys.version_info[0] == 2 else self.image1)
            oprot.writeFieldEnd()
        if self.image2 is not None:
            oprot.writeFieldBegin('image2', TType.STRING, 2)
            oprot.writeString(self.image2.encode('utf-8') if sys.version_info[0] == 2 else self.image2)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FI_face_match_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FI_face_match_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FI_object_tracking_args(object):
    """
    Attributes:
     - image
     - rect
     - start
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'image', 'UTF8', None, ),  # 1
        (2, TType.STRUCT, 'rect', (rectangle, rectangle.thrift_spec), None, ),  # 2
        (3, TType.I32, 'start', None, None, ),  # 3
    )

    def __init__(self, image=None, rect=None, start=None,):
        self.image = image
        self.rect = rect
        self.start = start

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.image = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.rect = rectangle()
                    self.rect.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.start = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FI_object_tracking_args')
        if self.image is not None:
            oprot.writeFieldBegin('image', TType.STRING, 1)
            oprot.writeString(self.image.encode('utf-8') if sys.version_info[0] == 2 else self.image)
            oprot.writeFieldEnd()
        if self.rect is not None:
            oprot.writeFieldBegin('rect', TType.STRUCT, 2)
            self.rect.write(oprot)
            oprot.writeFieldEnd()
        if self.start is not None:
            oprot.writeFieldBegin('start', TType.I32, 3)
            oprot.writeI32(self.start)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FI_object_tracking_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (rectangle, rectangle.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = rectangle()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FI_object_tracking_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
